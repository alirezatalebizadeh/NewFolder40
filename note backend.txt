node ==> well come to note (enter to node)

ctrl + c ===> exit from node

cd ../ ==> برگشت به عقب
cd Users ===> رفتن به فولدر مربوطه

cls or clear ===> clear code
================
اطلاعات امنیتی رو توی سمت سرور و بک اند و دیتابیس نگه میدارن.

دیتابیس رو سمت فرانت اند بصورت پیشرفته نداریم.

api ==> application progress interfase
رابط بین فرانت اند و بک اند هست.
یک لینک هست که به واسطه ی اون میتونیم بین فرانت اند و دیتابیس بک اند ارتباط برقرار کنیم.

فرانت اند  <====api (response and request)====> بک اند

نحوه ی دریافت دیتا با api
fetch('api link').
    then(res => res.json()).then( data => console.log(data));

============================
کارهایی که با اطلاعات میتونیم انجام بدیم
crud(create /read/update/delete)

restfull api ==> 
apiهایی که سمت بک اند توسعه داده میشه تا فرانت اند کار بتونه ازشون استفاده کنه برای عملیات کراد crud  
===============p12============

package.json ===> اطلاعات پروژه توی اینه
نصب و حذف پکیج در پروژه  
npm i packageName
npm rm packageName

==============npm and npx==============
 npm مدیریت کننده ی پکیج های پروژه هست.
یعنی پکیج حتما باید نصب بشه و بعد استفاده بشه.

npx ==> با کمک این میتونیم پکیج ها رو بدون نصب روی پروژه و فقط از طریق سرور استفاده کرد.
نمیشه هر پکیجی رو با این روش استفاده کرد.

===============module=============

توی برنامه نویسی ممکنه قسمت های مختلفی داشته باشیم.
نمیتونیم همه رو یه جا اکی کنیم. باید هر قسمت کارش مشخص باشه و بدونیم مربوط به کدوم قسمته .
مثلا کد های مربوط به ورود یا لاگین کاربر یه جا باشه .
کد های مربوط به دریافت اطلاعات و نشون دادن در دام در یک جای مشخص و مجزای دیگه باشه .

exports.add = function add(num1, num2) {
    return num1 + num2
}
-------------------
let calc = require('./funcs')

============= nodemon===========

نیازی نیست هی بنویسی node server.js تا کدهاش بعد از تغییر جدیدی که میدی اجرا بشه. این پکیج فایلی که بهش میدی رو برات در نظر میگیره و به محض کوچیک ترین تغییری در پروژه و فایل js برات کد ها رو اجرا میکنه.
npx nodemon server.js

=============modules=================
چند تا ماژول رو خود node تحت اختیارمون قرار داده
ادرس ماژول ها
https://nodejs.org/dist/latest-v18.x/docs/api/


 open: [Function: open],===> 
  openSync: [Function: openSync], ===> بصورت زمانبر اجرا میشه


===============http method============

Post to create data
Get to Read data
Put to Update data
Delete to Delete data

==============cors policy===============
هر کسی نمیتونه از سرور یه شرکت یا یه شخص دیگه استفاده کنه.

باید مشخص کنیم چه کلاینت هایی به چه api هایی
میتونن دسترسی داشته باشن و به چه صورت!
همینطور برعکس کیا نمیتونن دسترسی داشته باشن.

    res.setHeader('Access-Control-Allow-Origin', '*')//access all users
===============================
ارزیابی اطلاعات هم میتونه سمت فرانت انجام بشه هم سمت بک اند.
فرانت اند رو میشه همه جوره دورش زد و امنیت پایینی داره.

اما برای این که هی درخواست ندیم سمت سرور و سرور نابود بشه ، بهتره سمت فرانت اند عملیات ارزیابی دیتا ها رو اکی کنیم. 
ارزیابی رو سمت بک اند هم انجام بده.امنیت سایتت خیلی خیلی مهمه.

================postman=========
به کمک postman میتونی تمامی apiهایی که ساختی رو تست کنی.

============express js=============

چیست؟ یه چهارچوب خوب و خوانا رای توسعه پروژه در کمترین زمان ممکن

localhost:3000/api/users/remove?id=12
localhost:3000/api//users/remove/12

============requerst param=========
توی url به سمت بک اند میره.

request body: 
اطلاعات زیاد رو در قالب بدنه ریکوِست (request body )به بک اند ارسال میکنیم.

================================

we will create a htmla page and then get data from api and show it in dom.    

we can not test api (delete and post and put) in browser

================body parser  to convert data========================
npm i body-parser

this is a package to parse data

//parse data to get data with body-parser
app.use(bodyParser.json())
//or with express
// app.use(express.json({ extended: false }))

 ======================cors package ======================
install :
 npm i cors
برای گرفتن باگ پروژه

==============================express router=====================


برای هر دسته از اطلاعات وب سایت باید یک route مشخص کنیم.


























